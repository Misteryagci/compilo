import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import stree.*;
import utils.*;


parser code {: 
    
    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    :}

init with {:
    :}

terminal 
    IF, ELSE, IF_WITHOUT_ELSE,
    WHILE,
    LPAR, RPAR, LBRACKET, RBRACKET,
    SEMIC,
    AND, OR, NOT, LT, GT, LE, GE, EQ, EQEQ, DIFF, PLUS, MINUS, MINUS_U, MULT, DIV, MOD,
    COLONS, INCREM, DECREM, NO_LOGIC, PIPE,  FOR_EACH, IN, REPEAT, LET, POINT, ARROW, COMA,
    INT, CHAR, FLOAT, BOOL, STRING, VAR_TYPE, LIST_OF_VAR_TYPE, POINTER_VAR_TYPE, AND_COM,
    LEFT_DECAL, RIGHT_DECAL, CHAP, TILD, RETURN, LIST_OF_TYPE, POINTER_TYPE, STRUCT, CLASS,
    NULL, FALSE, TRUE, TYPE, LBRACE, RBRACE, FUNCTION;
terminal String IDENTIFIER, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float FLOAT_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal Character CHARACTER_LITERAL; 

non terminal axiom;
non terminal Stree stm, stms, expr, exprs, variables, variable, literal, block, declarations, attrs, attr, beginblock, function, blockfunction, beginfunction, call;
non terminal Type params, param, type;
non terminal String declaration;

precedence nonassoc ELSE;
precedence nonassoc IF_WITHOUT_ELSE;
precedence left AND;
precedence left OR;
precedence left LT, GT, LE, GE, EQEQ, DIFF;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left MINUS_U;

start with axiom;

axiom ::= stms 
    ;

stms ::= 
      stms stm    
    | stm             
    ;


stm ::= 
      IF expr:e stm:i1 ELSE stm:i2  
    | IF expr:e stm:i1             
    | WHILE expr:e stm:i            
    | variable:v EQ expr:e SEMIC    
    | variable:v EQ LBRACKET exprs:e RBRACKET SEMIC 
    | function:f                    
    | call:c                        
    | declaration:d                 
    | block:b                       
    | RETURN SEMIC                  
    | RETURN expr:e SEMIC           
    | error:e SEMIC                 {: parser.report_error("stm", e); :}
;

exprs ::=
      exprs COMA expr 
    | expr
    ;

expr ::=
      variable:v                
//    | call:c                    
      | expr:e1 PLUS expr:e2       
      | expr:e1 MINUS expr:e2      
      | MINUS expr:e               %prec MINUS_U 
      | expr:e1 MULT expr:e2      
      | expr:e1 DIV expr:e2        
      | expr:e1 MOD expr:e2        
      | expr:e1 AND expr:e2        
      | NOT expr:e                 
      | expr:e1 OR expr:e2         
      | expr:e1 LT expr:e2         
      | expr:e1 GT expr:e2         
      | expr:e1 LE expr:e2        
      | expr:e1 GE expr:e2         
      | expr:e1 EQEQ expr:e2       
      | expr:e1 DIFF expr:e2      
      | LPAR expr:e RPAR          
      | literal:l                 
      ;

function ::= beginfunction blockfunction:b  
	;

beginfunction ::= FUNCTION 
	;

blockfunction ::= IDENTIFIER:id LPAR params:p RPAR COLONS type:t LBRACE stms:s RBRACE
    
    ;

call ::=
    IDENTIFIER:id LPAR variables RPAR SEMIC 
    ;

params ::=
      params:p1 COMA param:p2    
    | param:p                    
    |                      
    ;

param ::= 
    IDENTIFIER:id COLONS type:t    
    ;

block ::=
    beginblock stms:s RBRACE 
    ;

beginblock ::= LBRACE 
	;

type ::=
     STRUCT LBRACE attrs RBRACE 
   | BOOL                      
   | INT                        
   | CHAR                       
   | FLOAT                      
   | STRING                     
   ;

attrs ::= 
    attrs attr {: :}
    | attr {: :}
    ;

attr ::= declaration;

declarations ::=
    declarations declaration
    | declaration {:  :}
    ;

declaration ::=
      IDENTIFIER:id COLONS type:t SEMIC               
    | IDENTIFIER:id COLONS LIST_OF_TYPE type:t SEMIC  
    | IDENTIFIER:id COLONS CHAP type:t SEMIC          
    ;

variables ::=
      variables COMA variable
    | variable
    |
    ;

variable ::=
      IDENTIFIER:id
	
    | IDENTIFIER:id LBRACKET expr:e RBRACKET
    ;

literal ::=
	  CHARACTER_LITERAL:c   
	| INTEGER_LITERAL:i     
	| FLOAT_LITERAL:f      
	| STRING_LITERAL:str    
        | BOOLEAN_LITERAL:bool  
	;


