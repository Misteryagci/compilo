
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 11 13:58:30 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import stree.*;
import utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 11 13:58:30 CEST 2015
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\003\007\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\003\010\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\005\000\002\003" +
    "\004\000\002\006\005\000\002\006\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\017\004\000\002\021\003\000\002" +
    "\020\013\000\002\022\007\000\002\023\005\000\002\023" +
    "\003\000\002\023\002\000\002\024\005\000\002\012\005" +
    "\000\002\016\003\000\002\025\006\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\003\000\002\013\004\000\002\013\003\000\002\026\006" +
    "\000\002\026\007\000\002\026\007\000\002\007\005\000" +
    "\002\007\003\000\002\007\002\000\002\010\003\000\002" +
    "\010\006\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\003\015\004\014\007\004\066\021\077" +
    "\005\101\020\102\017\001\002\000\024\010\100\017\105" +
    "\030\074\102\104\103\101\104\110\105\103\106\076\107" +
    "\102\001\002\000\020\003\uffd4\004\uffd4\007\uffd4\066\uffd4" +
    "\077\uffd4\101\uffd4\102\uffd4\001\002\000\026\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\066\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\001\002\000\022\002\000\003\015\004" +
    "\014\007\004\066\021\077\005\101\020\102\017\001\002" +
    "\000\026\002\ufff5\003\ufff5\004\ufff5\005\ufff5\007\ufff5\066" +
    "\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\001\002\000\004" +
    "\024\172\001\002\000\026\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\066\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8" +
    "\001\002\000\020\003\015\004\014\007\004\066\021\077" +
    "\005\101\020\102\017\001\002\000\024\010\100\017\105" +
    "\030\074\102\104\103\101\104\110\105\103\106\076\107" +
    "\102\001\002\000\004\014\163\001\002\000\004\002\162" +
    "\001\002\000\012\010\153\012\145\024\uffc2\035\052\001" +
    "\002\000\004\102\uffdc\001\002\000\026\010\100\014\075" +
    "\017\105\030\074\102\104\103\101\104\110\105\103\106" +
    "\076\107\102\001\002\000\004\102\025\001\002\000\024" +
    "\002\ufffe\003\ufffe\004\ufffe\007\ufffe\066\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\001\002\000\026\002\ufff7\003\ufff7" +
    "\004\ufff7\005\ufff7\007\ufff7\066\ufff7\077\ufff7\100\ufff7\101" +
    "\ufff7\102\ufff7\001\002\000\004\010\027\001\002\000\026" +
    "\002\uffdd\003\uffdd\004\uffdd\005\uffdd\007\uffdd\066\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\001\002\000\010\011\uffd7" +
    "\050\uffd7\102\030\001\002\000\004\035\072\001\002\000" +
    "\006\011\034\050\033\001\002\000\006\011\uffd8\050\uffd8" +
    "\001\002\000\004\102\030\001\002\000\004\035\035\001" +
    "\002\000\016\051\044\052\043\053\042\054\040\055\036" +
    "\071\041\001\002\000\012\011\uffce\014\uffce\050\uffce\077" +
    "\uffce\001\002\000\004\077\065\001\002\000\012\011\uffd2" +
    "\014\uffd2\050\uffd2\077\uffd2\001\002\000\004\077\045\001" +
    "\002\000\012\011\uffcf\014\uffcf\050\uffcf\077\uffcf\001\002" +
    "\000\012\011\uffd0\014\uffd0\050\uffd0\077\uffd0\001\002\000" +
    "\012\011\uffd1\014\uffd1\050\uffd1\077\uffd1\001\002\000\004" +
    "\102\050\001\002\000\006\100\uffcc\102\uffcc\001\002\000" +
    "\006\100\064\102\050\001\002\000\004\035\052\001\002" +
    "\000\006\100\uffcb\102\uffcb\001\002\000\022\051\044\052" +
    "\043\053\042\054\040\055\036\064\054\067\053\071\041" +
    "\001\002\000\016\051\044\052\043\053\042\054\040\055" +
    "\036\071\041\001\002\000\016\051\044\052\043\053\042" +
    "\054\040\055\036\071\041\001\002\000\004\014\056\001" +
    "\002\000\026\002\uffc8\003\uffc8\004\uffc8\005\uffc8\007\uffc8" +
    "\066\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000" +
    "\004\014\060\001\002\000\026\002\uffc6\003\uffc6\004\uffc6" +
    "\005\uffc6\007\uffc6\066\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\001\002\000\004\014\062\001\002\000\026\002\uffc7" +
    "\003\uffc7\004\uffc7\005\uffc7\007\uffc7\066\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\001\002\000\006\100\uffcd\102\uffcd" +
    "\001\002\000\012\011\uffd3\014\uffd3\050\uffd3\077\uffd3\001" +
    "\002\000\020\003\015\004\014\007\004\066\021\077\005" +
    "\101\020\102\017\001\002\000\022\003\015\004\014\007" +
    "\004\066\021\077\005\100\070\101\020\102\017\001\002" +
    "\000\024\002\uffff\003\uffff\004\uffff\007\uffff\066\uffff\077" +
    "\uffff\100\uffff\101\uffff\102\uffff\001\002\000\026\002\uffdb" +
    "\003\uffdb\004\uffdb\005\uffdb\007\uffdb\066\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\001\002\000\006\011\uffd9\050\uffd9" +
    "\001\002\000\016\051\044\052\043\053\042\054\040\055" +
    "\036\071\041\001\002\000\006\011\uffd6\050\uffd6\001\002" +
    "\000\024\010\100\017\105\030\074\102\104\103\101\104" +
    "\110\105\103\106\076\107\102\001\002\000\026\002\ufff4" +
    "\003\ufff4\004\ufff4\005\ufff4\007\ufff4\066\ufff4\077\ufff4\100" +
    "\ufff4\101\ufff4\102\ufff4\001\002\000\062\003\uffbc\004\uffbc" +
    "\007\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\032\uffbc\033\uffbc\034\uffbc\050\uffbc\066\uffbc\077" +
    "\uffbc\101\uffbc\102\uffbc\001\002\000\062\003\uffef\004\uffef" +
    "\007\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\032\uffef\033\uffef\034\uffef\050\uffef\066\uffef\077" +
    "\uffef\101\uffef\102\uffef\001\002\000\024\010\100\017\105" +
    "\030\074\102\104\103\101\104\110\105\103\106\076\107" +
    "\102\001\002\000\062\003\uffbd\004\uffbd\007\uffbd\011\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\050\uffbd\066\uffbd\077\uffbd\101\uffbd\102" +
    "\uffbd\001\002\000\062\003\uffc0\004\uffc0\007\uffc0\011\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\050\uffc0\066\uffc0\077\uffc0\101\uffc0\102" +
    "\uffc0\001\002\000\062\003\uffbe\004\uffbe\007\uffbe\011\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\050\uffbe\066\uffbe\077\uffbe\101\uffbe\102" +
    "\uffbe\001\002\000\064\003\uffc2\004\uffc2\007\uffc2\011\uffc2" +
    "\012\145\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\050\uffc2\066\uffc2\077\uffc2\101" +
    "\uffc2\102\uffc2\001\002\000\024\010\100\017\105\030\074" +
    "\102\104\103\101\104\110\105\103\106\076\107\102\001" +
    "\002\000\036\014\114\015\112\016\126\020\125\021\123" +
    "\022\121\023\116\025\113\026\124\027\120\030\111\032" +
    "\117\033\122\034\115\001\002\000\062\003\uffde\004\uffde" +
    "\007\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\050\uffde\066\uffde\077" +
    "\uffde\101\uffde\102\uffde\001\002\000\062\003\uffbf\004\uffbf" +
    "\007\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\032\uffbf\033\uffbf\034\uffbf\050\uffbf\066\uffbf\077" +
    "\uffbf\101\uffbf\102\uffbf\001\002\000\024\010\100\017\105" +
    "\030\074\102\104\103\101\104\110\105\103\106\076\107" +
    "\102\001\002\000\024\010\100\017\105\030\074\102\104" +
    "\103\101\104\110\105\103\106\076\107\102\001\002\000" +
    "\024\010\100\017\105\030\074\102\104\103\101\104\110" +
    "\105\103\106\076\107\102\001\002\000\026\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\007\ufff3\066\ufff3\077\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\001\002\000\024\010\100\017\105\030" +
    "\074\102\104\103\101\104\110\105\103\106\076\107\102" +
    "\001\002\000\024\010\100\017\105\030\074\102\104\103" +
    "\101\104\110\105\103\106\076\107\102\001\002\000\024" +
    "\010\100\017\105\030\074\102\104\103\101\104\110\105" +
    "\103\106\076\107\102\001\002\000\024\010\100\017\105" +
    "\030\074\102\104\103\101\104\110\105\103\106\076\107" +
    "\102\001\002\000\024\010\100\017\105\030\074\102\104" +
    "\103\101\104\110\105\103\106\076\107\102\001\002\000" +
    "\024\010\100\017\105\030\074\102\104\103\101\104\110" +
    "\105\103\106\076\107\102\001\002\000\024\010\100\017" +
    "\105\030\074\102\104\103\101\104\110\105\103\106\076" +
    "\107\102\001\002\000\024\010\100\017\105\030\074\102" +
    "\104\103\101\104\110\105\103\106\076\107\102\001\002" +
    "\000\024\010\100\017\105\030\074\102\104\103\101\104" +
    "\110\105\103\106\076\107\102\001\002\000\024\010\100" +
    "\017\105\030\074\102\104\103\101\104\110\105\103\106" +
    "\076\107\102\001\002\000\062\003\uffe6\004\uffe6\007\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\125\021" +
    "\123\022\121\023\116\025\113\026\124\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe6\066\uffe6\077\uffe6\101" +
    "\uffe6\102\uffe6\001\002\000\062\003\uffe5\004\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe5\066\uffe5\077\uffe5\101" +
    "\uffe5\102\uffe5\001\002\000\062\003\uffe0\004\uffe0\007\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe0\066\uffe0\077\uffe0\101" +
    "\uffe0\102\uffe0\001\002\000\062\003\uffe4\004\uffe4\007\uffe4" +
    "\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe4\066\uffe4\077\uffe4\101" +
    "\uffe4\102\uffe4\001\002\000\062\003\uffea\004\uffea\007\uffea" +
    "\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\032\uffea\033\uffea\034\uffea\050\uffea\066\uffea\077\uffea\101" +
    "\uffea\102\uffea\001\002\000\062\003\uffe3\004\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe3\066\uffe3\077\uffe3\101" +
    "\uffe3\102\uffe3\001\002\000\062\003\uffee\004\uffee\007\uffee" +
    "\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\032\117\033\122\034\115\050\uffee\066\uffee\077\uffee\101" +
    "\uffee\102\uffee\001\002\000\062\003\uffeb\004\uffeb\007\uffeb" +
    "\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\050\uffeb\066\uffeb\077\uffeb\101" +
    "\uffeb\102\uffeb\001\002\000\062\003\uffe2\004\uffe2\007\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe2\066\uffe2\077\uffe2\101" +
    "\uffe2\102\uffe2\001\002\000\062\003\uffe9\004\uffe9\007\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\050\uffe9\066\uffe9\077\uffe9\101" +
    "\uffe9\102\uffe9\001\002\000\062\003\uffe1\004\uffe1\007\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe1\066\uffe1\077\uffe1\101" +
    "\uffe1\102\uffe1\001\002\000\062\003\uffe8\004\uffe8\007\uffe8" +
    "\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\126\020\125\021" +
    "\123\022\121\023\116\025\113\026\124\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe8\066\uffe8\077\uffe8\101" +
    "\uffe8\102\uffe8\001\002\000\062\003\uffed\004\uffed\007\uffed" +
    "\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\032\117\033\122\034\115\050\uffed\066\uffed\077\uffed\101" +
    "\uffed\102\uffed\001\002\000\062\003\uffe7\004\uffe7\007\uffe7" +
    "\011\uffe7\013\uffe7\014\uffe7\015\112\016\126\020\125\021" +
    "\123\022\121\023\116\025\113\026\124\027\120\030\111" +
    "\032\117\033\122\034\115\050\uffe7\066\uffe7\077\uffe7\101" +
    "\uffe7\102\uffe7\001\002\000\024\010\100\017\105\030\074" +
    "\102\104\103\101\104\110\105\103\106\076\107\102\001" +
    "\002\000\036\013\147\015\112\016\126\020\125\021\123" +
    "\022\121\023\116\025\113\026\124\027\120\030\111\032" +
    "\117\033\122\034\115\001\002\000\064\003\uffc1\004\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\050\uffc1\066" +
    "\uffc1\077\uffc1\101\uffc1\102\uffc1\001\002\000\036\011\151" +
    "\015\112\016\126\020\125\021\123\022\121\023\116\025" +
    "\113\026\124\027\120\030\111\032\117\033\122\034\115" +
    "\001\002\000\062\003\uffdf\004\uffdf\007\uffdf\011\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\050\uffdf\066\uffdf\077\uffdf\101\uffdf\102\uffdf" +
    "\001\002\000\062\003\uffec\004\uffec\007\uffec\011\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\032\uffec\033" +
    "\uffec\034\uffec\050\uffec\066\uffec\077\uffec\101\uffec\102\uffec" +
    "\001\002\000\010\011\uffc3\050\uffc3\102\104\001\002\000" +
    "\006\011\uffc4\050\uffc4\001\002\000\006\011\157\050\156" +
    "\001\002\000\004\102\104\001\002\000\004\014\160\001" +
    "\002\000\026\002\uffda\003\uffda\004\uffda\005\uffda\007\uffda" +
    "\066\uffda\077\uffda\100\uffda\101\uffda\102\uffda\001\002\000" +
    "\006\011\uffc5\050\uffc5\001\002\000\004\002\001\001\002" +
    "\000\026\002\ufff2\003\ufff2\004\ufff2\005\ufff2\007\ufff2\066" +
    "\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\001\002\000\052" +
    "\003\015\004\014\007\004\015\112\016\126\020\125\021" +
    "\123\022\121\023\116\025\113\026\124\027\120\030\111" +
    "\032\117\033\122\034\115\066\021\077\005\101\020\102" +
    "\017\001\002\000\026\002\ufffc\003\ufffc\004\ufffc\005\166" +
    "\007\ufffc\066\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\001" +
    "\002\000\020\003\015\004\014\007\004\066\021\077\005" +
    "\101\020\102\017\001\002\000\026\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\007\ufffd\066\ufffd\077\ufffd\100\ufffd\101\ufffd" +
    "\102\ufffd\001\002\000\022\003\015\004\014\007\004\066" +
    "\021\077\005\100\171\101\020\102\017\001\002\000\026" +
    "\002\uffd5\003\uffd5\004\uffd5\005\uffd5\007\uffd5\066\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002\000\026\010\100" +
    "\012\174\017\105\030\074\102\104\103\101\104\110\105" +
    "\103\106\076\107\102\001\002\000\036\014\203\015\112" +
    "\016\126\020\125\021\123\022\121\023\116\025\113\026" +
    "\124\027\120\030\111\032\117\033\122\034\115\001\002" +
    "\000\024\010\100\017\105\030\074\102\104\103\101\104" +
    "\110\105\103\106\076\107\102\001\002\000\006\013\200" +
    "\050\177\001\002\000\040\013\ufff0\015\112\016\126\020" +
    "\125\021\123\022\121\023\116\025\113\026\124\027\120" +
    "\030\111\032\117\033\122\034\115\050\ufff0\001\002\000" +
    "\024\010\100\017\105\030\074\102\104\103\101\104\110" +
    "\105\103\106\076\107\102\001\002\000\004\014\201\001" +
    "\002\000\026\002\ufff9\003\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\066\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\001\002\000" +
    "\040\013\ufff1\015\112\016\126\020\125\021\123\022\121" +
    "\023\116\025\113\026\124\027\120\030\111\032\117\033" +
    "\122\034\115\050\ufff1\001\002\000\026\002\ufffa\003\ufffa" +
    "\004\ufffa\005\ufffa\007\ufffa\066\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\102\ufffa\001\002\000\052\003\015\004\014\007\004" +
    "\015\112\016\126\020\125\021\123\022\121\023\116\025" +
    "\113\026\124\027\120\030\111\032\117\033\122\034\115" +
    "\066\021\077\005\101\020\102\017\001\002\000\026\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\066\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\026\002\015\003\022\004\006\010\010\012" +
    "\007\016\012\017\011\021\021\022\023\026\005\001\001" +
    "\000\010\005\203\010\076\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\066\010\010\012\007" +
    "\016\012\017\011\021\021\022\023\026\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\022\004\167\010\010\012\007\016\012\017\011\021" +
    "\021\022\023\026\005\001\001\000\010\005\163\010\076" +
    "\011\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\105\010\076" +
    "\011\106\001\001\000\004\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\030\024\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\070\001\001" +
    "\000\002\001\001\000\004\025\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\046\015\045\026\050\001\001\000\002\001\001" +
    "\000\006\015\062\026\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\054\001\001\000\004\025\060" +
    "\001\001\000\004\025\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\022\004\065\010\010\012\007\016\012" +
    "\017\011\021\021\022\023\026\005\001\001\000\022\003" +
    "\066\010\010\012\007\016\012\017\011\021\021\022\023" +
    "\026\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\072\001\001\000\002\001\001" +
    "\000\010\005\151\010\076\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\147" +
    "\010\076\011\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\143" +
    "\010\076\011\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\142\010\076\011\106" +
    "\001\001\000\010\005\141\010\076\011\106\001\001\000" +
    "\010\005\140\010\076\011\106\001\001\000\002\001\001" +
    "\000\010\005\137\010\076\011\106\001\001\000\010\005" +
    "\136\010\076\011\106\001\001\000\010\005\135\010\076" +
    "\011\106\001\001\000\010\005\134\010\076\011\106\001" +
    "\001\000\010\005\133\010\076\011\106\001\001\000\010" +
    "\005\132\010\076\011\106\001\001\000\010\005\131\010" +
    "\076\011\106\001\001\000\010\005\130\010\076\011\106" +
    "\001\001\000\010\005\127\010\076\011\106\001\001\000" +
    "\010\005\126\010\076\011\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\145\010\076\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\154\010\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\164\010\010" +
    "\012\007\016\012\017\011\021\021\022\023\026\005\001" +
    "\001\000\002\001\001\000\022\003\166\010\010\012\007" +
    "\016\012\017\011\021\021\022\023\026\005\001\001\000" +
    "\002\001\001\000\022\003\066\010\010\012\007\016\012" +
    "\017\011\021\021\022\023\026\005\001\001\000\002\001" +
    "\001\000\010\005\172\010\076\011\106\001\001\000\002" +
    "\001\001\000\012\005\175\006\174\010\076\011\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\201" +
    "\010\076\011\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\204" +
    "\010\010\012\007\016\012\017\011\021\021\022\023\026" +
    "\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    }

 
    
    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {
  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= BOOLEAN_LITERAL 
            {
              Stree RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= STRING_LITERAL 
            {
              Stree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= FLOAT_LITERAL 
            {
              Stree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= INTEGER_LITERAL 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= CHARACTER_LITERAL 
            {
              Stree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              Stree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= IDENTIFIER 
            {
              Stree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variables ::= 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variables ::= variable 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variables ::= variables COMA variable 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= IDENTIFIER COLONS CHAP type SEMIC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= IDENTIFIER COLONS LIST_OF_TYPE type SEMIC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= IDENTIFIER COLONS type SEMIC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarations ::= declaration 
            {
              Stree RESULT =null;
		  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declarations",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarations ::= declarations declaration 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declarations",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // attr ::= declaration 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("attr",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // attrs ::= attr 
            {
              Stree RESULT =null;
		 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("attrs",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // attrs ::= attrs attr 
            {
              Stree RESULT =null;
		 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("attrs",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= STRING 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= FLOAT 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= CHAR 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= BOOL 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= STRUCT LBRACE attrs RBRACE 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // beginblock ::= LBRACE 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("beginblock",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block ::= beginblock stms RBRACE 
            {
              Stree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param ::= IDENTIFIER COLONS type 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // params ::= 
            {
              Type RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("params",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // params ::= param 
            {
              Type RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Type p = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("params",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // params ::= params COMA param 
            {
              Type RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Type p1 = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Type p2 = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("params",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // call ::= IDENTIFIER LPAR variables RPAR SEMIC 
            {
              Stree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // blockfunction ::= IDENTIFIER LPAR params RPAR COLONS type LBRACE stms RBRACE 
            {
              Stree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Type p = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("blockfunction",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // beginfunction ::= FUNCTION 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("beginfunction",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= beginfunction blockfunction 
            {
              Stree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree b = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= literal 
            {
              Stree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree l = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LPAR expr RPAR 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr DIFF expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr EQEQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr GE expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LE expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr GT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr LT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr OR expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NOT expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr AND expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MOD expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DIV expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MULT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MINUS expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MINUS expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= variable 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exprs ::= expr 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("exprs",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exprs ::= exprs COMA expr 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("exprs",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stm ::= error SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 parser.report_error("stm", e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stm ::= RETURN expr SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stm ::= RETURN SEMIC 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stm ::= block 
            {
              Stree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree b = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stm ::= declaration 
            {
              Stree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stm ::= call 
            {
              Stree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree c = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stm ::= function 
            {
              Stree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree f = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stm ::= variable EQ LBRACKET exprs RBRACKET SEMIC 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stm ::= variable EQ expr SEMIC 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stm ::= WHILE expr stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stm ::= IF expr stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree i1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stm ::= IF expr stm ELSE stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Stree i1 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Stree i2 = (Stree)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stm",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stms ::= stm 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stms",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stms ::= stms stm 
            {
              Stree RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("stms",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= stms 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

