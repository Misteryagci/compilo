
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 00:25:43 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 00:25:43 CEST 2015
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\002\000\002\004\004\000\002\004\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\032\017\000\002\041\010\000\002\041\011\000\002\022" +
    "\006\000\002\021\003\000\002\021\005\000\002\036\004" +
    "\000\002\034\004\000\002\027\007\000\002\027\007\000" +
    "\002\027\010\000\002\027\011\000\002\027\007\000\002" +
    "\042\002\000\002\042\004\000\002\042\005\000\002\037" +
    "\004\000\002\043\004\000\002\043\007\000\002\043\003" +
    "\000\002\043\006\000\002\043\003\000\002\043\010\000" +
    "\002\043\007\000\002\040\007\000\002\040\006\000\002" +
    "\044\002\000\002\044\004\000\002\045\004\000\002\045" +
    "\005\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\003\000" +
    "\002\045\003\000\002\046\011\000\002\047\005\000\002" +
    "\047\003\000\002\050\004\000\002\005\002\000\002\005" +
    "\004\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\004\000\002\024\005\000" +
    "\002\030\005\000\002\030\006\000\002\023\004\000\002" +
    "\023\004\000\002\023\003\000\002\023\006\000\002\023" +
    "\005\000\002\023\003\000\002\023\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\004\000\002\012\005\000" +
    "\002\013\005\000\002\013\005\000\002\031\005\000\002" +
    "\031\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\020\003" +
    "\000\002\020\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\010\006\ufffe\010\ufffe\101\ufffe\001\002\000" +
    "\004\002\336\001\002\000\010\006\007\010\013\101\020" +
    "\001\002\000\004\002\000\001\002\000\006\076\322\107" +
    "\300\001\002\000\012\002\ufffd\006\ufffd\010\ufffd\101\ufffd" +
    "\001\002\000\012\002\ufff9\006\ufff9\010\ufff9\101\ufff9\001" +
    "\002\000\012\002\ufffb\006\ufffb\010\ufffb\101\ufffb\001\002" +
    "\000\004\107\311\001\002\000\006\021\040\040\ufff8\001" +
    "\002\000\012\002\ufffa\006\ufffa\010\ufffa\101\ufffa\001\002" +
    "\000\012\002\ufffe\006\ufffe\010\ufffe\101\ufffe\001\002\000" +
    "\004\040\307\001\002\000\004\107\306\001\002\000\006" +
    "\021\040\040\ufff7\001\002\000\006\021\023\040\ufff6\001" +
    "\002\000\016\006\uffe8\010\uffe8\022\uffe8\054\uffe8\077\uffe8" +
    "\107\uffe8\001\002\000\016\006\026\010\013\022\035\054" +
    "\027\077\025\107\031\001\002\000\012\006\026\010\013" +
    "\054\027\107\031\001\002\000\004\107\300\001\002\000" +
    "\004\107\271\001\002\000\016\006\uffe0\010\uffe0\022\uffe0" +
    "\054\uffe0\077\uffe0\107\uffe0\001\002\000\006\036\260\051" +
    "\202\001\002\000\016\006\uffe7\010\uffe7\022\uffe7\054\uffe7" +
    "\077\uffe7\107\uffe7\001\002\000\004\040\257\001\002\000" +
    "\004\021\040\001\002\000\012\002\ufff2\006\ufff2\010\ufff2" +
    "\101\ufff2\001\002\000\016\006\uffe2\010\uffe2\022\uffe2\054" +
    "\uffe2\077\uffe2\107\uffe2\001\002\000\004\021\040\001\002" +
    "\000\112\003\uffdb\011\uffdb\012\uffdb\013\uffdb\016\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\033\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\053\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\100\uffdb\106\uffdb\107\uffdb\001\002\000\022" +
    "\002\uffe5\006\uffe5\010\uffe5\022\uffe5\054\uffe5\077\uffe5\101" +
    "\uffe5\107\uffe5\001\002\000\112\003\067\011\063\012\044" +
    "\013\056\016\052\020\043\021\040\022\045\025\071\026" +
    "\076\027\051\030\066\033\061\035\075\036\100\040\uffcc" +
    "\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\053\072\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\073\047\074\077\075\055\100\050\106\074\107" +
    "\054\001\002\000\004\040\255\001\002\000\010\012\044" +
    "\043\062\107\102\001\002\000\130\002\uffab\003\uffab\006" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\016\uffab\020\uffab" +
    "\021\uffab\022\uffab\025\uffab\026\uffab\027\uffab\030\uffab\033" +
    "\uffab\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\053\uffab\054\uffab\057\uffab\060\uffab\061" +
    "\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\071\uffab" +
    "\073\uffab\074\uffab\075\uffab\077\uffab\100\uffab\101\uffab\106" +
    "\uffab\107\uffab\001\002\000\036\040\253\041\107\042\120" +
    "\043\114\044\115\045\104\057\106\060\112\061\113\063" +
    "\117\064\111\065\116\066\110\067\123\001\002\000\004" +
    "\036\247\001\002\000\066\003\067\012\044\025\071\026" +
    "\076\027\051\030\066\033\061\035\075\036\100\040\uffcc" +
    "\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\053\072\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\106\074\107\102\001\002\000\044\024\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\001\002\000\004\036\237\001\002" +
    "\000\114\003\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\053\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\071\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\100\uffd1\106\uffd1\107\uffd1\001\002" +
    "\000\056\014\233\023\uffa6\036\127\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\051\202\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\102\uffa6\103\uffa6\001\002\000\004\107\222" +
    "\001\002\000\004\107\166\001\002\000\004\040\165\001" +
    "\002\000\056\023\155\024\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\055\162\056" +
    "\164\057\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\102\153\103\154\001\002\000\044\024" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000\010\012\044" +
    "\043\062\107\102\001\002\000\004\040\151\001\002\000" +
    "\004\040\150\001\002\000\004\040\147\001\002\000\044" +
    "\024\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000\004\040" +
    "\134\001\002\000\056\023\uffa3\024\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\102\uffa3\103\uffa3\001\002\000" +
    "\044\024\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\057\uffc2\060\uffc2\061\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\074" +
    "\003\067\012\044\024\uffcc\025\071\026\076\027\051\030" +
    "\066\033\061\035\075\036\100\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\062\044\uffcc\045\uffcc\046\uffcc\053\072\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\106\074\107\102\001\002\000\112\003\uffda\011" +
    "\uffda\012\uffda\013\uffda\016\uffda\020\uffda\021\uffda\022\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\033\uffda\035\uffda\036" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\053\uffda\057\uffda\060\uffda\061\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\073\uffda\074\uffda\075\uffda\100\uffda" +
    "\106\uffda\107\uffda\001\002\000\044\024\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\001\002\000\044\024\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\001\002\000\044\024\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\001\002\000\110\003\067\011\063\012\044\013\056" +
    "\016\052\020\043\021\040\025\071\026\076\027\051\030" +
    "\066\033\061\035\075\036\100\040\uffcc\041\uffcc\042\uffcc" +
    "\043\062\044\uffcc\045\uffcc\053\072\057\uffcc\060\uffcc\061" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\073\047" +
    "\074\077\075\055\100\050\106\074\107\054\001\002\000" +
    "\066\003\067\012\044\025\071\026\076\027\051\030\066" +
    "\033\061\035\075\036\100\037\uffcc\041\uffcc\042\uffcc\043" +
    "\062\044\uffcc\045\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\106\074\107" +
    "\102\001\002\000\114\003\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\016\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\033\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\053\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\071\uffd2\073\uffd2\074\uffd2\075\uffd2\100\uffd2\106\uffd2\107" +
    "\uffd2\001\002\000\060\023\uffa6\024\uffa6\036\127\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\102\uffa6\103\uffa6\001" +
    "\002\000\036\037\122\041\107\042\120\043\114\044\115" +
    "\045\104\057\106\060\112\061\113\063\117\064\111\065" +
    "\116\066\110\067\123\001\002\000\074\003\uff95\012\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\033\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\053\uff95\057\uff95\060\uff95\061" +
    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\106\uff95" +
    "\107\uff95\001\002\000\074\003\uffbd\012\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\053\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\106\uffbd\107\uffbd\001" +
    "\002\000\074\003\uffba\012\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\053\uffba\057\uffba\060\uffba\061\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\106\uffba\107\uffba\001\002\000\074" +
    "\003\uff97\012\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\033\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\053\uff97\057" +
    "\uff97\060\uff97\061\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\106\uff97\107\uff97\001\002\000\074\003\uff93\012" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\033\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\053\uff93\057\uff93\060\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\106" +
    "\uff93\107\uff93\001\002\000\074\003\uffbb\012\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\033\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\053\uffbb\057\uffbb\060\uffbb\061\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\106\uffbb\107\uffbb" +
    "\001\002\000\074\003\uffb9\012\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\033\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\053\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\106\uffb9\107\uffb9\001\002\000" +
    "\074\003\uffb7\012\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\053\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\106\uffb7\107\uffb7\001\002\000\074\003\uff96" +
    "\012\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\033" +
    "\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\053\uff96\057\uff96\060" +
    "\uff96\061\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\106\uff96\107\uff96\001\002\000\074\003\uff98\012\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\033\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\053\uff98\057\uff98\060\uff98\061\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\106\uff98\107" +
    "\uff98\001\002\000\074\003\uff94\012\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\033\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\053\uff94\057\uff94\060\uff94\061\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\106\uff94\107\uff94\001\002" +
    "\000\074\003\uffb8\012\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\033\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\053" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\106\uffb8\107\uffb8\001\002\000\074\003" +
    "\uff99\012\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\033\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\053\uff99\057\uff99" +
    "\060\uff99\061\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\106\uff99\107\uff99\001\002\000\074\003\uffbe\012\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\033\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\053\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\106\uffbe" +
    "\107\uffbe\001\002\000\044\024\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\001\002\000\074\003\uffb6\012\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\033\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\053\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\106\uffb6\107\uffb6\001\002" +
    "\000\074\003\067\012\044\024\uffcc\025\071\026\076\027" +
    "\051\030\066\033\061\035\075\036\100\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\046\uffcc\053" +
    "\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\106\074\107\102\001\002\000\074\003" +
    "\uffbc\012\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\053\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\106\uffbc\107\uffbc\001\002\000\044\024\uffca\037\uffca" +
    "\040\uffca\041\107\042\120\043\114\044\115\045\104\046" +
    "\uffca\057\106\060\112\061\113\063\117\064\111\065\116" +
    "\066\110\067\123\001\002\000\070\003\132\012\044\025" +
    "\071\026\076\027\051\030\066\033\061\035\075\036\100" +
    "\037\133\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\046" +
    "\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\106\074\107\102\001\002\000" +
    "\042\024\uffa1\037\uffa1\041\107\042\120\043\114\044\115" +
    "\045\104\046\uffa1\057\106\060\112\061\113\063\117\064" +
    "\111\065\116\066\110\067\123\001\002\000\006\037\137" +
    "\046\136\001\002\000\006\037\135\040\134\001\002\000" +
    "\056\023\uffaa\024\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\102\uffaa\103\uffaa\001\002\000\044\024\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\001\002\000\010\024\uff9f\037\uff9f" +
    "\046\uff9f\001\002\000\072\003\067\012\044\024\uffcc\025" +
    "\071\026\076\027\051\030\066\033\061\035\075\036\100" +
    "\037\uffcc\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\046" +
    "\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\106\074\107\102\001\002\000" +
    "\056\023\uffa9\024\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\102\uffa9\103\uffa9\001\002\000\042\024\uffa0\037" +
    "\uffa0\041\107\042\120\043\114\044\115\045\104\046\uffa0" +
    "\057\106\060\112\061\113\063\117\064\111\065\116\066" +
    "\110\067\123\001\002\000\004\073\142\001\002\000\004" +
    "\036\143\001\002\000\066\003\067\012\044\025\071\026" +
    "\076\027\051\030\066\033\061\035\075\036\100\037\uffcc" +
    "\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\053\072\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\106\074\107\102\001\002\000\036\037\145\041" +
    "\107\042\120\043\114\044\115\045\104\057\106\060\112" +
    "\061\113\063\117\064\111\065\116\066\110\067\123\001" +
    "\002\000\114\003\uffeb\011\uffeb\012\uffeb\013\uffeb\016\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\033\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\053\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\071\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\100\uffeb\106\uffeb\107\uffeb\001" +
    "\002\000\044\024\uffcb\037\uffcb\040\uffcb\041\107\042\120" +
    "\043\114\044\115\045\104\046\uffcb\057\106\060\112\061" +
    "\113\063\117\064\111\065\116\066\110\067\123\001\002" +
    "\000\114\003\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\033\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\053\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\100\uffd5\106\uffd5\107\uffd5\001\002" +
    "\000\114\003\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\033\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\053\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\071\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\100\uffd7\106\uffd7\107\uffd7\001\002" +
    "\000\114\003\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\033\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\053\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\100\uffd3\106\uffd3\107\uffd3\001\002" +
    "\000\056\023\uffa7\024\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\102\uffa7\103\uffa7\001\002\000\010\012\044" +
    "\043\062\107\102\001\002\000\010\012\044\043\062\107" +
    "\102\001\002\000\066\003\067\012\044\024\uffcc\025\071" +
    "\026\076\027\051\030\066\033\061\035\075\036\100\041" +
    "\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc\053\072\057\uffcc" +
    "\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\106\074\107\102\001\002\000\036\024\157\041\107" +
    "\042\120\043\114\044\115\045\104\057\106\060\112\061" +
    "\113\063\117\064\111\065\116\066\110\067\123\001\002" +
    "\000\056\023\uffa5\024\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\102\uffa5\103\uffa5\001\002\000\056\023\uffa2" +
    "\024\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\102" +
    "\uffa2\103\uffa2\001\002\000\056\023\uffa4\024\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\067\uffa4\102\uffa4\103\uffa4\001" +
    "\002\000\044\024\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\057\uff92\060\uff92\061" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\001\002" +
    "\000\044\024\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000" +
    "\044\024\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\057\uff91\060\uff91\061\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\001\002\000\114" +
    "\003\uffd6\011\uffd6\012\uffd6\013\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\033\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\053\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\100\uffd6\106\uffd6\107\uffd6\001\002\000\004" +
    "\014\167\001\002\000\004\015\170\001\002\000\004\021" +
    "\171\001\002\000\004\107\172\001\002\000\004\051\202" +
    "\001\002\000\004\040\201\001\002\000\006\022\177\040" +
    "\176\001\002\000\006\022\uffce\040\uffce\001\002\000\004" +
    "\107\172\001\002\000\004\040\uffd0\001\002\000\006\022" +
    "\uffcf\040\uffcf\001\002\000\006\022\uffcd\040\uffcd\001\002" +
    "\000\026\003\213\007\204\013\211\031\203\032\215\033" +
    "\214\034\205\104\206\107\212\110\210\001\002\000\012" +
    "\021\uffb3\037\uffb3\040\uffb3\046\uffb3\001\002\000\026\003" +
    "\213\007\204\013\211\031\203\032\215\033\214\034\205" +
    "\104\206\107\212\110\210\001\002\000\012\021\uffb5\037" +
    "\uffb5\040\uffb5\046\uffb5\001\002\000\026\003\213\007\204" +
    "\013\211\031\203\032\215\033\214\034\205\104\206\107" +
    "\212\110\210\001\002\000\010\037\uff9e\040\uff9e\046\uff9e" +
    "\001\002\000\012\021\uffb2\037\uffb2\040\uffb2\046\uffb2\001" +
    "\002\000\026\003\213\007\204\013\211\031\203\032\215" +
    "\033\214\034\205\104\206\107\212\110\210\001\002\000" +
    "\012\021\uffb4\037\uffb4\040\uffb4\046\uffb4\001\002\000\004" +
    "\040\216\001\002\000\012\021\uffae\037\uffae\040\uffae\046" +
    "\uffae\001\002\000\012\021\uffaf\037\uffaf\040\uffaf\046\uffaf" +
    "\001\002\000\012\021\uffac\037\uffac\040\uffac\046\uffac\001" +
    "\002\000\012\021\uffad\037\uffad\040\uffad\046\uffad\001\002" +
    "\000\012\021\uffb0\037\uffb0\040\uffb0\046\uffb0\001\002\000" +
    "\012\021\uffb1\037\uffb1\040\uffb1\046\uffb1\001\002\000\004" +
    "\072\223\001\002\000\006\003\225\023\226\001\002\000" +
    "\110\003\067\011\063\012\044\013\056\016\052\020\043" +
    "\021\040\025\071\026\076\027\051\030\066\033\061\035" +
    "\075\036\100\040\uffcc\041\uffcc\042\uffcc\043\062\044\uffcc" +
    "\045\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\073\047\074\077\075\055" +
    "\100\050\106\074\107\054\001\002\000\004\024\231\001" +
    "\002\000\070\003\132\012\044\024\uffcc\025\071\026\076" +
    "\027\051\030\066\033\061\035\075\036\100\041\uffcc\042" +
    "\uffcc\043\062\044\uffcc\045\uffcc\046\uffcc\053\072\057\uffcc" +
    "\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\106\074\107\102\001\002\000\006\024\230\046\136" +
    "\001\002\000\110\003\uff9b\011\uff9b\012\uff9b\013\uff9b\016" +
    "\uff9b\020\uff9b\021\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\033\uff9b\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\053\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\100\uff9b\106\uff9b\107\uff9b\001\002\000\110" +
    "\003\uff9a\011\uff9a\012\uff9a\013\uff9a\016\uff9a\020\uff9a\021" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\033\uff9a\035\uff9a" +
    "\036\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\053\uff9a\057\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\073\uff9a\074\uff9a\075\uff9a\100" +
    "\uff9a\106\uff9a\107\uff9a\001\002\000\114\003\uffed\011\uffed" +
    "\012\uffed\013\uffed\016\uffed\020\uffed\021\uffed\022\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\033\uffed\035\uffed\036\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\053" +
    "\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\071\uffed\073\uffed\074\uffed\075\uffed\100" +
    "\uffed\106\uffed\107\uffed\001\002\000\070\003\236\012\044" +
    "\023\226\025\071\026\076\027\051\030\066\033\061\035" +
    "\075\036\100\040\uffcc\041\uffcc\042\uffcc\043\062\044\uffcc" +
    "\045\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\106\074\107\102\001\002" +
    "\000\036\040\uff9c\041\107\042\120\043\114\044\115\045" +
    "\104\057\106\060\112\061\113\063\117\064\111\065\116" +
    "\066\110\067\123\001\002\000\004\040\uff9d\001\002\000" +
    "\006\024\231\040\134\001\002\000\066\003\067\012\044" +
    "\025\071\026\076\027\051\030\066\033\061\035\075\036" +
    "\100\037\uffcc\041\uffcc\042\uffcc\043\062\044\uffcc\045\uffcc" +
    "\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\106\074\107\102\001\002\000\036" +
    "\037\241\041\107\042\120\043\114\044\115\045\104\057" +
    "\106\060\112\061\113\063\117\064\111\065\116\066\110" +
    "\067\123\001\002\000\110\003\067\011\063\012\044\013" +
    "\056\016\052\020\043\021\040\025\071\026\076\027\051" +
    "\030\066\033\061\035\075\036\100\040\uffcc\041\uffcc\042" +
    "\uffcc\043\062\044\uffcc\045\uffcc\053\072\057\uffcc\060\uffcc" +
    "\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\073" +
    "\047\074\077\075\055\100\050\106\074\107\054\001\002" +
    "\000\114\003\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\033\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\053\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\071\243\073" +
    "\uffe9\074\uffe9\075\uffe9\100\uffe9\106\uffe9\107\uffe9\001\002" +
    "\000\110\003\067\011\063\012\044\013\056\016\052\020" +
    "\043\021\040\025\071\026\076\027\051\030\066\033\061" +
    "\035\075\036\100\040\uffcc\041\uffcc\042\uffcc\043\062\044" +
    "\uffcc\045\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\073\047\074\077\075" +
    "\055\100\050\106\074\107\054\001\002\000\114\003\uffea" +
    "\011\uffea\012\uffea\013\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\uffea\035\uffea" +
    "\036\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\053\uffea\057\uffea\060\uffea\061\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\071\uffea\073\uffea\074\uffea\075" +
    "\uffea\100\uffea\106\uffea\107\uffea\001\002\000\036\040\246" +
    "\041\107\042\120\043\114\044\115\045\104\057\106\060" +
    "\112\061\113\063\117\064\111\065\116\066\110\067\123" +
    "\001\002\000\114\003\uffd8\011\uffd8\012\uffd8\013\uffd8\016" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\033\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\053\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\071" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\100\uffd8\106\uffd8\107\uffd8" +
    "\001\002\000\066\003\067\012\044\025\071\026\076\027" +
    "\051\030\066\033\061\035\075\036\100\037\uffcc\041\uffcc" +
    "\042\uffcc\043\062\044\uffcc\045\uffcc\053\072\057\uffcc\060" +
    "\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\106\074\107\102\001\002\000\036\037\251\041\107\042" +
    "\120\043\114\044\115\045\104\057\106\060\112\061\113" +
    "\063\117\064\111\065\116\066\110\067\123\001\002\000" +
    "\110\003\067\011\063\012\044\013\056\016\052\020\043" +
    "\021\040\025\071\026\076\027\051\030\066\033\061\035" +
    "\075\036\100\040\uffcc\041\uffcc\042\uffcc\043\062\044\uffcc" +
    "\045\uffcc\053\072\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\073\047\074\077\075\055" +
    "\100\050\106\074\107\054\001\002\000\114\003\uffec\011" +
    "\uffec\012\uffec\013\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\033\uffec\035\uffec\036" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\053\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\071\uffec\073\uffec\074\uffec\075\uffec" +
    "\100\uffec\106\uffec\107\uffec\001\002\000\114\003\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4\035\uffd4\036" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\053\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\071\uffd4\073\uffd4\074\uffd4\075\uffd4" +
    "\100\uffd4\106\uffd4\107\uffd4\001\002\000\056\023\uffa8\024" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\102\153" +
    "\103\154\001\002\000\114\003\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\033\uffd9\035\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\053\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\071\uffd9\073\uffd9\074\uffd9\075\uffd9\100\uffd9\106\uffd9" +
    "\107\uffd9\001\002\000\022\002\uffef\006\uffef\010\uffef\022" +
    "\uffef\054\uffef\077\uffef\101\uffef\107\uffef\001\002\000\016" +
    "\006\uffe4\010\uffe4\022\uffe4\054\uffe4\077\uffe4\107\uffe4\001" +
    "\002\000\006\037\263\107\172\001\002\000\006\037\ufff1" +
    "\046\ufff1\001\002\000\006\037\266\046\265\001\002\000" +
    "\004\021\040\001\002\000\016\006\uffe1\010\uffe1\022\uffe1" +
    "\054\uffe1\077\uffe1\107\uffe1\001\002\000\004\107\172\001" +
    "\002\000\004\021\040\001\002\000\016\006\uffe3\010\uffe3" +
    "\022\uffe3\054\uffe3\077\uffe3\107\uffe3\001\002\000\006\037" +
    "\ufff0\046\ufff0\001\002\000\004\036\272\001\002\000\006" +
    "\037\274\107\172\001\002\000\006\037\276\046\265\001" +
    "\002\000\004\021\040\001\002\000\016\006\uffde\010\uffde" +
    "\022\uffde\054\uffde\077\uffde\107\uffde\001\002\000\004\021" +
    "\040\001\002\000\016\006\uffdf\010\uffdf\022\uffdf\054\uffdf" +
    "\077\uffdf\107\uffdf\001\002\000\004\036\301\001\002\000" +
    "\006\037\303\107\172\001\002\000\006\037\304\046\265" +
    "\001\002\000\006\021\uffdc\040\uffdc\001\002\000\006\021" +
    "\uffdd\040\uffdd\001\002\000\016\006\uffe6\010\uffe6\022\uffe6" +
    "\054\uffe6\077\uffe6\107\uffe6\001\002\000\006\021\uffee\040" +
    "\uffee\001\002\000\012\002\ufffc\006\ufffc\010\ufffc\101\ufffc" +
    "\001\002\000\012\002\uffff\006\026\010\013\101\020\001" +
    "\002\000\004\036\312\001\002\000\006\037\314\107\172" +
    "\001\002\000\006\037\317\046\265\001\002\000\004\051" +
    "\315\001\002\000\026\003\213\007\204\013\211\031\203" +
    "\032\215\033\214\034\205\104\206\107\212\110\210\001" +
    "\002\000\006\021\ufff4\040\ufff4\001\002\000\004\051\320" +
    "\001\002\000\026\003\213\007\204\013\211\031\203\032" +
    "\215\033\214\034\205\104\206\107\212\110\210\001\002" +
    "\000\006\021\ufff3\040\ufff3\001\002\000\004\036\323\001" +
    "\002\000\004\107\324\001\002\000\004\051\325\001\002" +
    "\000\004\031\326\001\002\000\004\046\327\001\002\000" +
    "\004\107\330\001\002\000\004\051\331\001\002\000\004" +
    "\007\332\001\002\000\004\110\333\001\002\000\004\037" +
    "\334\001\002\000\004\021\040\001\002\000\012\002\ufff5" +
    "\006\ufff5\010\ufff5\101\ufff5\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\024\022\010\032\015\033\007\034\021" +
    "\035\016\036\011\037\014\040\013\041\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\255\001\001\000\002\001\001\000\004\004\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\040\001" +
    "\001\000\002\001\001\000\004\042\023\001\001\000\016" +
    "\012\032\036\027\037\035\040\033\041\036\043\031\001" +
    "\001\000\016\012\032\036\027\037\035\040\033\041\036" +
    "\043\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\004\044\041" +
    "\001\001\000\002\001\001\000\024\005\045\012\056\013" +
    "\064\023\057\024\052\027\100\030\067\045\072\046\063" +
    "\001\001\000\002\001\001\000\006\023\253\030\067\001" +
    "\001\000\002\001\001\000\012\006\120\007\104\015\123" +
    "\020\124\001\001\000\002\001\001\000\010\005\244\023" +
    "\057\030\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\162\001\001" +
    "\000\002\001\001\000\006\023\151\030\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\145\023\057\030\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\045\012\056\013\064\023\057\024\052" +
    "\027\100\030\067\045\140\046\063\001\001\000\010\005" +
    "\102\023\057\030\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\120\007\104\015\123\020\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\125\023\057\030\067\001\001\000\002\001" +
    "\001\000\012\006\120\007\104\015\123\020\124\001\001" +
    "\000\012\005\127\011\130\023\057\030\067\001\001\000" +
    "\012\006\120\007\104\015\123\020\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\137\023\057\030\067" +
    "\001\001\000\002\001\001\000\012\006\120\007\104\015" +
    "\123\020\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\143\023\057\030\067\001\001\000\012\006" +
    "\120\007\104\015\123\020\124\001\001\000\002\001\001" +
    "\000\012\006\120\007\104\015\123\020\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\160\030\067\001\001\000\006\023" +
    "\157\030\067\001\001\000\010\005\155\023\057\030\067" +
    "\001\001\000\012\006\120\007\104\015\123\020\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\172\047\173\050\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\172\050\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\206" +
    "\001\001\000\002\001\001\000\004\014\220\001\001\000" +
    "\002\001\001\000\004\014\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\223\001\001" +
    "\000\024\005\045\012\056\013\064\023\057\024\052\027" +
    "\100\030\067\045\231\046\063\001\001\000\002\001\001" +
    "\000\012\005\127\011\226\023\057\030\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\233\023\057\030\067\031\234\001" +
    "\001\000\012\006\120\007\104\015\123\020\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\237\023" +
    "\057\030\067\001\001\000\012\006\120\007\104\015\123" +
    "\020\124\001\001\000\024\005\045\012\056\013\064\023" +
    "\057\024\052\027\100\030\067\045\241\046\063\001\001" +
    "\000\002\001\001\000\024\005\045\012\056\013\064\023" +
    "\057\024\052\027\100\030\067\045\243\046\063\001\001" +
    "\000\002\001\001\000\012\006\120\007\104\015\123\020" +
    "\124\001\001\000\002\001\001\000\010\005\247\023\057" +
    "\030\067\001\001\000\012\006\120\007\104\015\123\020" +
    "\124\001\001\000\024\005\045\012\056\013\064\023\057" +
    "\024\052\027\100\030\067\045\251\046\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\260\021\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\263\001\001\000\002\001\001\000\004\012" +
    "\267\001\001\000\004\024\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\260\021" +
    "\272\001\001\000\002\001\001\000\004\024\274\001\001" +
    "\000\002\001\001\000\004\024\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\260\021\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\022\010\033\007\034\021\035\016\036\011\037\014\040" +
    "\013\041\020\001\001\000\002\001\001\000\006\012\260" +
    "\021\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\334\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    }

 
    
    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {
  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pp_mm ::= DECREM 
            {
              Object RESULT =null;
		 System.out.println("Reduction pp_mm -> --"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("pp_mm",6, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pp_mm ::= INCREM 
            {
              Object RESULT =null;
		 System.out.println("Reduction pp_mm -> ++"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("pp_mm",6, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // etcomou ::= OR 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("etcomou",14, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // etcomou ::= AND_COM 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("etcomou",14, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // symbol_mathematiques ::= MOD 
            {
              Object RESULT =null;
		 System.out.println("Reduction symbol_mathematiques -> MOD"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("symbol_mathematiques",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // symbol_mathematiques ::= MULT 
            {
              Object RESULT =null;
		 System.out.println("Reduction symbol_mathematiques -> MULT"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("symbol_mathematiques",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // symbol_mathematiques ::= PLUS 
            {
              Object RESULT =null;
		 System.out.println("Reduction symbol_mathematiques -> PLUS"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("symbol_mathematiques",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // symbol_mathematiques ::= DIV 
            {
              Object RESULT =null;
		 System.out.println("Reduction symbol_mathematiques -> DIV"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("symbol_mathematiques",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // symbol_mathematiques ::= MINUS 
            {
              Object RESULT =null;
		 System.out.println("Reduction symbol_mathematiques -> MINUS"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("symbol_mathematiques",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // list_or_set ::= error RBRACKET 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("list_or_set",23, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list_or_set ::= LBRACKET typess_list RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("Reduction list_or_set"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("list_or_set",23, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment ::= ID EQ typess 
            {
              Object RESULT =null;
		 System.out.println("Reduction assignment"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment ::= ID EQ list_or_set 
            {
              Object RESULT =null;
		 System.out.println("Reduction assignment"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_var ::= ID COLONS variabless_t 
            {
              Object RESULT =null;
		 System.out.println("Reduction dec_var"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // typess_list ::= error RPAR 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess_list",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // typess_list ::= typess_list COMA typess 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess_list",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // typess_list ::= typess 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess_list",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // shift_reduce ::= shift_reduce ARROW shift_reduce 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // shift_reduce ::= appelle_de_fonction 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // shift_reduce ::= shift_reduce POINT shift_reduce 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // shift_reduce ::= shift_reduce LBRACKET typess RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // shift_reduce ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // shift_reduce ::= MULT shift_reduce 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // shift_reduce ::= AND shift_reduce 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess_list"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("shift_reduce",17, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // appelle_de_fonction ::= ID LPAR typess_list RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction function "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("appelle_de_fonction",22, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // appelle_de_fonction ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction function"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("appelle_de_fonction",22, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // block ::= LBRACE instrs RBRACE 
            {
              Object RESULT =null;
		 System.out.println("Reduction block == instrs "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variabless_t ::= error POINTVIRG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variabless_t ::= TYPE variabless_t 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variabless_t ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variabless_t ::= CHAR 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variabless_t ::= VAR_TYPE variabless_t 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variabless_t ::= LIST_OF_TYPE variabless_t 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variabless_t ::= STRING 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variabless_t ::= INT 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variabless_t ::= ID 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variabless_t ::= BOOL 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variabless_t",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sign_of ::= DIFF 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> DIFF"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sign_of ::= LE 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> LE"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sign_of ::= GE 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> GE"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sign_of ::= GT 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> GT"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sign_of ::= LT 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> LT"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sign_of ::= ENTREPARENT 
            {
              Object RESULT =null;
		 System.out.println("Reduction sign_of -> ENTREPARENT"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("sign_of",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_declaration ::= etcomou 
            {
              Object RESULT =null;
		 System.out.println("Reduction operator_declaration -> etcomou"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("operator_declaration",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operator_declaration ::= sign_of 
            {
              Object RESULT =null;
		 System.out.println("Reduction operator_declaration -> sign_of"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("operator_declaration",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operator_declaration ::= symbol_mathematiques 
            {
              Object RESULT =null;
		 System.out.println("Reduction operator_eclaration -> symbol_mathematiques"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("operator_declaration",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // typess ::= error POINTVIRG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typess ::= LPAR typess RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess typess "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typess ::= STRINGSS 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess ->  "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typess ::= CHARAA 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess ->  "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typess ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> NULL "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typess ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> FALSE "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typess ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> TRUE "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typess ::= shift_reduce pp_mm 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> pp_mm "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typess ::= shift_reduce 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> shift_reduce "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typess ::= NBR 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> NBR "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typess ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> FLOAT "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typess ::= typess operator_declaration typess 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typess ::= NO_LOGIC typess 
            {
              Object RESULT =null;
		 System.out.println("Reduction typess -> NO_LOGIC typess "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typess ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("typess",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // structure ::= dec_var POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction structure== dec_var "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("structure",38, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // structs ::= structure 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("structs",37, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // structs ::= structs POINTVIRG structure 
            {
              Object RESULT =null;
		 System.out.println("Reduction structs "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("structs",37, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_declaration ::= TYPE ID EQ STRUCT LBRACE structs RBRACE 
            {
              Object RESULT =null;
		 System.out.println("Reduction type_declaration "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type_declaration",36, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction ::= block 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= statementss 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= BREAK POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= typess POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= assignment POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= dec_var POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction ::= type_declaration POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction ::= RETURN typess POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruction ::= STOP POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction instruction "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction",35, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrs ::= instrs instruction 
            {
              Object RESULT =null;
		 System.out.println("Reduction instrs "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instrs",34, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrs ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instrs",34, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imp_procedure ::= PROCEDURE ID LPAR RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_procedure "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_procedure",30, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // imp_procedure ::= PROCEDURE ID LPAR list_argument_definition RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_procedure"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_procedure",30, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // class_content ::= TILD ID LPAR RPAR block 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_content ::= TILD ID LPAR list_argument_definition RPAR block 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_content ::= create_procedure 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content == create_procedure "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // class_content ::= ID LPAR RPAR block 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // class_content ::= create_function 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content == create_function "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // class_content ::= ID LPAR list_argument_definition RPAR block 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content == constructeur"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // class_content ::= dec_var POINTVIRG 
            {
              Object RESULT =null;
		 System.out.println("Reduction class_content == dec_var "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class_content",33, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // create_function ::= imp_function block 
            {
              Object RESULT =null;
		 System.out.println("Reduction create_function== imp_function"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("create_function",29, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class ::= class STATIC class_content 
            {
              Object RESULT =null;
		 System.out.println("Reduction class STATIC "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class",32, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class ::= class class_content 
            {
              Object RESULT =null;
		 System.out.println("Reduction class == class_content "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class",32, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // class ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("class",32, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementss ::= IF LPAR typess RPAR instruction 
            {
              Object RESULT =null;
		 System.out.println("Reduction statementss "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statementss",21, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementss ::= IF LPAR typess RPAR instruction ELSE instruction 
            {
              Object RESULT =null;
		 System.out.println("Reduction statementss "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statementss",21, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementss ::= REPEAT instruction WHILE LPAR typess RPAR 
            {
              Object RESULT =null;
		 System.out.println("Reduction statementss "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statementss",21, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statementss ::= WHILE LPAR typess RPAR instruction 
            {
              Object RESULT =null;
		 System.out.println("Reduction statementss "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statementss",21, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statementss ::= FOR_EACH ID IN list_or_set instruction 
            {
              Object RESULT =null;
		 System.out.println("Reduction statementss "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statementss",21, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // imp_class ::= CLASS ID 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_class "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_class",26, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // create_procedure ::= imp_procedure block 
            {
              Object RESULT =null;
		 System.out.println("Reduction create_procedure== imp_procedure"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("create_procedure",28, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_argument_definition ::= list_argument_definition COMA dec_var 
            {
              Object RESULT =null;
		 System.out.println("Reduction list_argument_definition "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("list_argument_definition",15, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_argument_definition ::= dec_var 
            {
              Object RESULT =null;
		 System.out.println("Reduction list_argument_definition "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("list_argument_definition",15, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // create_class ::= imp_class LBRACE class RBRACE 
            {
              Object RESULT =null;
		 System.out.println("Reduction create_class "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("create_class",16, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // imp_function ::= FUNCTION ID LPAR list_argument_definition RPAR COLONS variabless_t 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_function "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_function",31, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // imp_function ::= FUNCTION ID LPAR RPAR COLONS variabless_t 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_function "); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_function",31, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main_definition ::= PROCEDURE MAIN LPAR ID COLONS INT COMA ID COLONS LIST_OF_TYPE STRING RPAR block 
            {
              Object RESULT =null;
		 System.out.println("main_definition"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("main_definition",24, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-12)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imp_executable ::= imp_class 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_executable== imp_class"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_executable",27, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imp_executable ::= imp_function 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_executable== imp_function"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_executable",27, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // imp_executable ::= imp_procedure 
            {
              Object RESULT =null;
		 System.out.println("Reduction imp_executable== imp_procedure"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("imp_executable",27, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_executable ::= create_class 
            {
              Object RESULT =null;
		 System.out.println("Reduction dec_executable== create_class"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("dec_executable",25, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_executable ::= create_function 
            {
              Object RESULT =null;
		 System.out.println("Reduction dec_executable == create_function"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("dec_executable",25, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_executable ::= create_procedure 
            {
              Object RESULT =null;
		 System.out.println("Reduction dec_executable == creat_procedure"); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("dec_executable",25, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // regle1 ::= regle1 imp_executable POINTVIRG 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("regle1",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // regle1 ::= regle1 dec_executable 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("regle1",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // regle1 ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("regle1",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= regle1 main_definition regle1 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("begin",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= begin 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

